name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/**'
      - 'infrastructure/kubernetes/apps/api/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/**'
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  deployments: write
  security-events: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: phrsat-backend
  COMPLIANCE_LEVEL: HIPAA
  MAX_DEPLOYMENT_TIME: 300

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTHONPATH: src/backend
      ENVIRONMENT: test
      COVERAGE_MINIMUM: 90

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt
          pip install pytest pytest-cov black isort mypy bandit safety

      - name: Run code formatting check
        run: |
          black --check src/backend
          isort --check-only src/backend

      - name: Run type checking
        run: mypy src/backend

      - name: Run unit tests
        run: |
          pytest tests/unit \
            --cov=src/backend \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results/junit.xml

      - name: Run integration tests
        run: |
          pytest tests/integration \
            --cov=src/backend \
            --cov-append \
            --cov-report=xml \
            --cov-report=html

      - name: Verify coverage threshold
        run: |
          coverage_value=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          if (( $(echo "$coverage_value < $COVERAGE_MINIMUM" | bc -l) )); then
            echo "Coverage $coverage_value% is below minimum $COVERAGE_MINIMUM%"
            exit 1
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            test-results/
            htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Bandit security scan
        run: |
          bandit -r src/backend -f json -o security-results/bandit.json
          bandit -r src/backend -f html -o security-results/bandit.html

      - name: Run dependency security scan
        run: |
          safety check -r src/backend/requirements.txt \
            --full-report \
            --output json > security-results/safety.json

      - name: Run HIPAA compliance checks
        run: |
          # Custom HIPAA compliance verification script
          python scripts/verify_hipaa_compliance.py

      - name: Build image for scanning
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/backend/Dockerfile
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@v0.11.2
        with:
          image-ref: ${{ env.IMAGE_NAME }}:scan
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: security-results/

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: [build]
    runs-on: self-hosted
    environment: staging
    timeout-minutes: 30
    env:
      ENVIRONMENT: staging
      KUBERNETES_NAMESPACE: phrsat-staging
      DEPLOYMENT_STRATEGY: BLUE_GREEN

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy to staging (Blue)
        run: |
          # Apply blue deployment
          envsubst < infrastructure/kubernetes/apps/api/deployment-blue.yaml | kubectl apply -f -
          
          # Wait for deployment
          kubectl rollout status deployment/phrsat-backend-blue -n $KUBERNETES_NAMESPACE --timeout=${MAX_DEPLOYMENT_TIME}s

      - name: Run smoke tests
        run: |
          python scripts/smoke_tests.py \
            --environment staging \
            --deployment blue

      - name: Switch traffic to blue
        run: |
          kubectl apply -f infrastructure/kubernetes/apps/api/service-blue.yaml
          
          # Verify health
          python scripts/verify_deployment.py \
            --environment staging \
            --deployment blue

      - name: Cleanup green deployment
        if: success()
        run: |
          kubectl delete deployment phrsat-backend-green -n $KUBERNETES_NAMESPACE --ignore-not-found

  deploy-production:
    needs: [deploy-staging]
    runs-on: self-hosted
    environment: 
      name: production
      url: https://api.phrsat.com
    timeout-minutes: 45
    env:
      ENVIRONMENT: production
      KUBERNETES_NAMESPACE: phrsat-production
      DEPLOYMENT_STRATEGY: BLUE_GREEN

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy to production (Blue)
        run: |
          envsubst < infrastructure/kubernetes/apps/api/deployment-blue.yaml | kubectl apply -f -
          kubectl rollout status deployment/phrsat-backend-blue -n $KUBERNETES_NAMESPACE --timeout=${MAX_DEPLOYMENT_TIME}s

      - name: Run production verification
        run: |
          python scripts/smoke_tests.py --environment production --deployment blue
          python scripts/verify_hipaa_compliance.py --environment production
          python scripts/load_tests.py --environment production --duration 300

      - name: Gradual traffic shift
        run: |
          for weight in 10 25 50 75 100; do
            # Update service with new weight
            envsubst < infrastructure/kubernetes/apps/api/service-split.yaml | sed "s/BLUE_WEIGHT/$weight/" | kubectl apply -f -
            
            # Monitor metrics
            python scripts/monitor_deployment.py \
              --environment production \
              --blue-weight $weight \
              --duration 300
          done

      - name: Finalize deployment
        run: |
          kubectl apply -f infrastructure/kubernetes/apps/api/service-blue.yaml
          
          # Cleanup old deployment
          kubectl delete deployment phrsat-backend-green -n $KUBERNETES_NAMESPACE --ignore-not-found

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}