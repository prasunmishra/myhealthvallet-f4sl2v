version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: phrsat/api:latest
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --workers 4
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - MONGODB_URL=mongodb://mongodb:27017/phrsat
      - REDIS_URL=redis://redis:6379/0
      - TIMESCALEDB_URL=postgresql://timescaledb:5432/phrsat
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - HIPAA_COMPLIANCE_MODE=strict
      - SECURITY_CONTEXT=production
    depends_on:
      - mongodb
      - redis
      - timescaledb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    secrets:
      - db_password
      - ssl_certificate
    networks:
      - backend

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: phrsat/worker:latest
    command: celery -A workers.celery worker --loglevel=info
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - MONGODB_URL=mongodb://mongodb:27017/phrsat
      - REDIS_URL=redis://redis:6379/0
      - TIMESCALEDB_URL=postgresql://timescaledb:5432/phrsat
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - HIPAA_COMPLIANCE_MODE=strict
    depends_on:
      - redis
      - mongodb
      - timescaledb
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    secrets:
      - db_password
    networks:
      - backend

  # MongoDB Service (v6.0)
  mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/db_password
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/db_password
      - MONGO_INITDB_DATABASE=phrsat
    volumes:
      - mongodb_data:/data/db
      - mongodb_backup:/backup
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    secrets:
      - db_password
    networks:
      - backend

  # TimescaleDB Service (v2.11)
  timescaledb:
    image: timescale/timescaledb:2.11-pg14
    environment:
      - POSTGRES_DB=phrsat
      - POSTGRES_USER_FILE=/run/secrets/db_password
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    secrets:
      - db_password
    networks:
      - backend

  # Redis Service (v7.0)
  redis:
    image: redis:7.0
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  # Prometheus Monitoring (v2.45.0)
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - backend

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      device: /data/mongodb
      o: bind
  mongodb_backup:
    driver: local
    driver_opts:
      type: none
      device: /backup/mongodb
      o: bind
  timescaledb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  backend:
    driver: bridge
    driver_opts:
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

secrets:
  db_password:
    file: ./secrets/db_password.txt
  ssl_certificate:
    file: ./secrets/ssl_cert.pem