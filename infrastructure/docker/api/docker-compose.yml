version: "3.8"

services:
  # API Service
  api:
    build:
      context: ../../../backend
      dockerfile: ./Dockerfile
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PORT=8000
      - WORKERS=4
      - LOG_LEVEL=info
      - ENV_STATE=development
      - MONGODB_URL=mongodb://mongodb:27017/phrsat
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - TIMESCALEDB_URL=postgresql://postgres:postgres@timescaledb:5432/phrsat
      - AWS_REGION=us-east-1
      - SENTRY_DSN=${SENTRY_DSN}
      - CORS_ORIGINS=http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - api_data:/app/data
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - api_network

  # MongoDB for document storage
  mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_DATABASE=phrsat
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - api_network

  # Redis for caching and session management
  redis:
    image: redis:7.0-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - api_network

  # Elasticsearch for full-text search
  elasticsearch:
    image: elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - api_network

  # TimescaleDB for time series data
  timescaledb:
    image: timescale/timescaledb:2.11-pg14
    environment:
      - POSTGRES_DB=phrsat
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - api_network

volumes:
  api_data:
    name: phrsat_api_data
  api_logs:
    name: phrsat_api_logs
  mongodb_data:
    name: phrsat_mongodb_data
  redis_data:
    name: phrsat_redis_data
  elasticsearch_data:
    name: phrsat_elasticsearch_data
  timescaledb_data:
    name: phrsat_timescaledb_data

networks:
  api_network:
    name: phrsat_api_network
    driver: bridge